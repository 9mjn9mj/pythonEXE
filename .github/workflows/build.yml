name: Build and Release Python EXE

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions: 
  contents: write  # ✅ push 권한 추가

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller  # ✅ pyinstaller 설치

      - name: Build EXE
        run: |
          python -m PyInstaller --onefile --windowed --hidden-import=requests main.py  # ✅ python -m PyInstaller 사용

      - name: Upload EXE as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: dist/main.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Release Tag  # ✅ 태그 자동 생성
        id: set_tag
        run: |
          NEW_TAG="v1.0.$(date +%s)"  # 현재 시간을 기반으로 새로운 태그 생성
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Download EXE Artifact
        uses: actions/download-artifact@v4
        with:
          name: python-app
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}  # ✅ 자동 생성된 태그 사용
          files: dist/main.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
